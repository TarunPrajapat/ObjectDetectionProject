{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n\nvar TimePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TimePicker, _Component);\n\n  function TimePicker() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TimePicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TimePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    return _this;\n  }\n\n  _createClass(TimePicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this,\n          _classNames;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          id = _this$props.id,\n          labelText = _this$props.labelText,\n          type = _this$props.type,\n          pattern = _this$props.pattern,\n          _onChange = _this$props.onChange,\n          _onClick = _this$props.onClick,\n          _onBlur = _this$props.onBlur,\n          placeholder = _this$props.placeholder,\n          maxLength = _this$props.maxLength,\n          invalidText = _this$props.invalidText,\n          invalid = _this$props.invalid,\n          hideLabel = _this$props.hideLabel,\n          light = _this$props.light,\n          other = _objectWithoutProperties(_this$props, [\"children\", \"className\", \"id\", \"labelText\", \"type\", \"pattern\", \"onChange\", \"onClick\", \"onBlur\", \"placeholder\", \"maxLength\", \"invalidText\", \"invalid\", \"hideLabel\", \"light\"]);\n\n      var timePickerInputProps = {\n        onChange: function onChange(evt) {\n          if (!other.disabled) {\n            _this2.setState({\n              value: evt.target.value\n            });\n\n            _onChange(evt);\n          }\n        },\n        onClick: function onClick(evt) {\n          if (!other.disabled) {\n            _this2.setState({\n              value: evt.target.value\n            });\n\n            _onClick(evt);\n          }\n        },\n        onBlur: function onBlur(evt) {\n          if (!other.disabled) {\n            _this2.setState({\n              value: evt.target.value\n            });\n\n            _onBlur(evt);\n          }\n        },\n        pattern: pattern,\n        placeholder: placeholder,\n        maxLength: maxLength,\n        id: id,\n        type: type,\n        value: this.state.value\n      };\n      var timePickerClasses = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--time-picker\"), true), _defineProperty(_classNames, \"\".concat(prefix, \"--time-picker--light\"), light), _defineProperty(_classNames, className, className), _classNames));\n      var labelClasses = classNames(\"\".concat(prefix, \"--label\"), _defineProperty({}, \"\".concat(prefix, \"--visually-hidden\"), hideLabel));\n      var label = labelText ? React.createElement(\"label\", {\n        htmlFor: id,\n        className: labelClasses\n      }, labelText) : null;\n      var error = invalid ? React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-requirement\")\n      }, invalidText) : null;\n      return React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--form-item\")\n      }, React.createElement(\"div\", {\n        className: timePickerClasses\n      }, React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--time-picker__input\")\n      }, label, React.createElement(\"input\", _extends({}, other, timePickerInputProps, {\n        \"data-invalid\": invalid ? invalid : undefined,\n        className: \"\".concat(prefix, \"--time-picker__input-field\")\n      })), error), children));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref, state) {\n      var value = _ref.value;\n      var prevValue = state.prevValue;\n      return prevValue === value ? null : {\n        value: value,\n        prevValue: value\n      };\n    }\n  }]);\n\n  return TimePicker;\n}(Component);\n\n_defineProperty(TimePicker, \"propTypes\", {\n  /**\n   * Pass in the children that will be rendered next to the form control\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify a custom `id` for the <input>\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node,\n\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * <input> is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Optionally provide an `onChange` handler that is called whenever <input>\n   * is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Optionally provide an `onBlur` handler that is called whenever the\n   * <input> loses focus\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Specify the type of the <input>\n   */\n  type: PropTypes.string,\n\n  /**\n   * Specify the regular expression working as the pattern of the time string in <input>\n   */\n  pattern: PropTypes.string,\n\n  /**\n   * Specify the placeholder attribute for the <input>\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Specify the maximum length of the time string in <input>\n   */\n  maxLength: PropTypes.number,\n\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Specify whether the <input> should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify the value of the <input>\n   */\n  value: PropTypes.string,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool\n});\n\n_defineProperty(TimePicker, \"defaultProps\", {\n  type: 'text',\n  pattern: '(1[012]|[1-9]):[0-5][0-9](\\\\s)?(?i)',\n  placeholder: 'hh:mm',\n  maxLength: 5,\n  invalidText: 'Invalid time format.',\n  invalid: false,\n  disabled: false,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  onBlur: function onBlur() {},\n  light: false\n});\n\nexport { TimePicker as default };","map":null,"metadata":{},"sourceType":"module"}