{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { iconCaretDown, iconCaretUp } from 'carbon-icons';\nimport { settings } from 'carbon-components';\nimport Icon from '../Icon';\nvar prefix = settings.prefix;\n\nvar TableHeader = function TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      iconClassName = props.iconClassName,\n      sortDir = props.sortDir,\n      iconDescriptionAscending = props.iconDescriptionAscending,\n      iconDescriptionDescending = props.iconDescriptionDescending,\n      other = _objectWithoutProperties(props, [\"children\", \"className\", \"iconClassName\", \"sortDir\", \"iconDescriptionAscending\", \"iconDescriptionDescending\"]);\n\n  var tableHeaderClasses = classNames(className, \"\".concat(prefix, \"--table-header\"));\n  var iconClasses = classNames(iconClassName, \"\".concat(prefix, \"--table-sort__svg\"));\n  var sortContent;\n\n  if (sortDir) {\n    sortContent = sortDir === 'DESC' ? React.createElement(Icon, {\n      icon: iconCaretDown,\n      description: iconDescriptionDescending,\n      className: iconClasses\n    }) : React.createElement(Icon, {\n      icon: iconCaretUp,\n      description: iconDescriptionAscending,\n      className: iconClasses\n    });\n  } else {\n    sortContent = '';\n  }\n\n  return React.createElement(\"th\", _extends({}, other, {\n    className: tableHeaderClasses\n  }), children, sortContent);\n};\n\nTableHeader.propTypes = {\n  /**\n   * Provide the contents of your TableHeader.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to your TableHeader.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The CSS class name for the icon.\n   */\n  iconClassName: PropTypes.string,\n\n  /**\n   * The description for the ascending icon.\n   */\n  iconDescriptionAscending: PropTypes.string,\n\n  /**\n   * The description for the descending icon.\n   */\n  iconDescriptionDescending: PropTypes.string,\n\n  /**\n   * The sorting direction, `DESC` or `ASC`.\n   */\n  sortDir: PropTypes.string\n};\nTableHeader.defaultProps = {\n  iconDescriptionAscending: 'ascending sort',\n  iconDescriptionDescending: 'descending sort'\n};\nexport default TableHeader;","map":null,"metadata":{},"sourceType":"module"}