{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nexport default function (ToMix) {\n  /**\n   * Mix-in class to instantiate components by searching for their root elements.\n   * @class InitComponentBySearch\n   */\n  var InitComponentBySearch =\n  /*#__PURE__*/\n  function (_ToMix) {\n    _inherits(InitComponentBySearch, _ToMix);\n\n    function InitComponentBySearch() {\n      _classCallCheck(this, InitComponentBySearch);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(InitComponentBySearch).apply(this, arguments));\n    }\n\n    _createClass(InitComponentBySearch, null, [{\n      key: \"init\",\n\n      /**\n       * Instantiates component in the given node.\n       * If the given element indicates that it's an component of this class, instantiates it.\n       * Otherwise, instantiates components by searching for components in the given node.\n       * @param {Node} target The DOM node to instantiate components in. Should be a document or an element.\n       * @param {Object} [options] The component options.\n       * @param {boolean} [options.selectorInit] The CSS selector to find components.\n       */\n      value: function init() {\n        var _this = this;\n\n        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var effectiveOptions = Object.assign(Object.create(this.options), options);\n\n        if (!target || target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n          throw new TypeError('DOM document or DOM element should be given to search for and initialize this widget.');\n        }\n\n        if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n          this.create(target, options);\n        } else {\n          Array.prototype.forEach.call(target.querySelectorAll(effectiveOptions.selectorInit), function (element) {\n            return _this.create(element, options);\n          });\n        }\n      }\n    }]);\n\n    return InitComponentBySearch;\n  }(ToMix);\n\n  return InitComponentBySearch;\n}","map":null,"metadata":{},"sourceType":"module"}