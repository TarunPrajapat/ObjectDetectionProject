{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\n\nvar Switch = function Switch(props) {\n  var className = props.className,\n      index = props.index,\n      kind = props.kind,\n      name = props.name,\n      onClick = props.onClick,\n      onKeyDown = props.onKeyDown,\n      selected = props.selected,\n      text = props.text,\n      icon = props.icon,\n      href = props.href,\n      other = _objectWithoutProperties(props, [\"className\", \"index\", \"kind\", \"name\", \"onClick\", \"onKeyDown\", \"selected\", \"text\", \"icon\", \"href\"]);\n\n  var handleClick = function handleClick(e) {\n    e.preventDefault();\n    onClick({\n      index: index,\n      name: name,\n      text: text\n    });\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    var key = e.key || e.which;\n\n    if (key === 'Enter' || key === 13 || key === ' ' || key === 32) {\n      onKeyDown({\n        index: index,\n        name: name,\n        text: text\n      });\n    }\n  };\n\n  var classes = classNames(className, \"\".concat(prefix, \"--content-switcher-btn\"), _defineProperty({}, \"\".concat(prefix, \"--content-switcher--selected\"), selected));\n  var commonProps = {\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    className: classes\n  };\n  var btnIcon = icon ? React.cloneElement(icon, {\n    className: classNames(icon.props.className, \" \".concat(prefix, \"--content-switcher__icon\"))\n  }) : null;\n\n  if (kind === 'button') {\n    return React.createElement(\"button\", _extends({}, other, commonProps), btnIcon, text);\n  }\n\n  return React.createElement(\"a\", _extends({\n    href: href\n  }, other, commonProps), btnIcon, text);\n};\n\nSwitch.propTypes = {\n  /**\n   * Specify an optional className to be added to your Switch\n   */\n  className: PropTypes.string,\n\n  /**\n   * The index of your Switch in your ContentSwitcher that is used for event handlers.\n   * Reserved for usage in ContentSwitcher\n   */\n  index: PropTypes.number,\n\n  /**\n   * Specify whether the <Switch> should be used as a <button> element or an <a> element\n   */\n  kind: PropTypes.oneOf(['button', 'anchor']).isRequired,\n\n  /**\n   * Provide the name of your Switch that is used for event handlers\n   */\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * A handler that is invoked when a user clicks on the control.\n   * Reserved for usage in ContentSwitcher\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * A handler that is invoked on the key down event for the control.\n   * Reserved for usage in ContentSwitcher\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * Whether your Switch is selected. Reserved for usage in ContentSwitcher\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * Provide the contents of your Switch\n   */\n  text: PropTypes.string.isRequired,\n\n  /**\n   * Specify an icon to include in your Switch\n   */\n  icon: PropTypes.element,\n\n  /**\n   * Optional string representing the link location for the Switch,\n   * if Switch is used as an <a> element\n   */\n  href: PropTypes.string\n};\nSwitch.defaultProps = {\n  selected: false,\n  kind: 'anchor',\n  text: 'Provide text',\n  href: '',\n  onClick: function onClick() {},\n  onKeyDown: function onKeyDown() {}\n};\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}