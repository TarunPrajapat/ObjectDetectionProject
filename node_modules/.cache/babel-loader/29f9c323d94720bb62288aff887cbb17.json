{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nvar translationKeys = {\n  'carbon.table.batch.cancel': 'Cancel',\n  'carbon.table.batch.items.selected': 'items selected',\n  'carbon.table.batch.item.selected': 'item selected'\n};\n\nvar translateWithId = function translateWithId(id, state) {\n  if (id === 'carbon.table.batch.cancel') {\n    return translationKeys[id];\n  }\n\n  return \"\".concat(state.totalSelected, \" \").concat(translationKeys[id]);\n};\n\nvar TableBatchActions = function TableBatchActions(_ref) {\n  var _cx;\n\n  var className = _ref.className,\n      children = _ref.children,\n      shouldShowBatchActions = _ref.shouldShowBatchActions,\n      totalSelected = _ref.totalSelected,\n      onCancel = _ref.onCancel,\n      t = _ref.translateWithId,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"children\", \"shouldShowBatchActions\", \"totalSelected\", \"onCancel\", \"translateWithId\"]);\n\n  var batchActionsClasses = cx((_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--batch-actions\"), true), _defineProperty(_cx, \"\".concat(prefix, \"--batch-actions--active\"), shouldShowBatchActions), _cx), className);\n  return React.createElement(\"div\", _extends({}, rest, {\n    className: batchActionsClasses\n  }), children, React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--batch-summary\")\n  }, React.createElement(\"p\", {\n    className: \"\".concat(prefix, \"--batch-summary__para\")\n  }, React.createElement(\"span\", null, totalSelected > 1 ? t('carbon.table.batch.items.selected', {\n    totalSelected: totalSelected\n  }) : t('carbon.table.batch.item.selected', {\n    totalSelected: totalSelected\n  }))), React.createElement(\"button\", {\n    className: \"\".concat(prefix, \"--batch-summary__cancel\"),\n    onClick: onCancel\n  }, t('carbon.table.batch.cancel'))));\n};\n\nTableBatchActions.translationKeys = Object.keys(translationKeys);\nTableBatchActions.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n\n  /**\n   * Boolean specifier for whether or not the batch action bar should be\n   * displayed\n   */\n  shouldShowBatchActions: PropTypes.bool,\n\n  /**\n   * Numeric representation of the total number of items selected in a table.\n   * This number is used to derive the selection message\n   */\n  totalSelected: PropTypes.number.isRequired,\n\n  /**\n   * Hook required to listen for when the user initiates a cancel request\n   * through this comopnent\n   */\n  onCancel: PropTypes.func.isRequired,\n\n  /**\n   * Supply a method to translate internal strings with your i18n tool of\n   * choice. Translation keys are avabile on the `translationKeys` field for\n   * this component.\n   */\n  translateWithId: PropTypes.func\n};\nTableBatchActions.defaultProps = {\n  translateWithId: translateWithId\n};\nexport default TableBatchActions;","map":null,"metadata":{},"sourceType":"module"}