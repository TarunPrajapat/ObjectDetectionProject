{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport { settings } from 'carbon-components';\nvar prefix = settings.prefix;\nvar didWarnAboutDeprecation = false;\n\nvar DropdownItem = function DropdownItem(_ref) {\n  var _classNames;\n\n  var className = _ref.className,\n      value = _ref.value,\n      isDropdownOpen = _ref.isDropdownOpen,\n      itemText = _ref.itemText,\n      onClick = _ref.onClick,\n      onKeyPress = _ref.onKeyPress,\n      href = _ref.href,\n      selected = _ref.selected,\n      other = _objectWithoutProperties(_ref, [\"className\", \"value\", \"isDropdownOpen\", \"itemText\", \"onClick\", \"onKeyPress\", \"href\", \"selected\"]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(didWarnAboutDeprecation, 'The `DropdownItem` component has been deprecated and will be ' + 'removed in the next major release of `carbon-components-react`. ' + 'Please use `DropdownV2` instead.') : void 0;\n    didWarnAboutDeprecation = true;\n  }\n\n  var dropdownItemClasses = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--dropdown-item\"), true), _defineProperty(_classNames, className, className), _classNames));\n\n  var handleClick = function handleClick() {\n    var info = {\n      value: value,\n      itemText: itemText\n    };\n    onClick(info);\n  };\n\n  var handleKeypress = function handleKeypress() {\n    var info = {\n      value: value,\n      itemText: itemText\n    };\n    onKeyPress(info);\n  };\n\n  return React.createElement(\"li\", _extends({}, other, {\n    value: value,\n    className: dropdownItemClasses,\n    onClick: handleClick,\n    onKeyPress: handleKeypress,\n    tabIndex: -1,\n    \"aria-selected\": selected,\n    role: \"option\"\n  }), React.createElement(\"a\", {\n    tabIndex: isDropdownOpen ? 0 : -1,\n    href: href,\n    onClick:\n    /* istanbul ignore next */\n    function onClick(evt) {\n      return evt.preventDefault();\n    },\n    className: \"\".concat(prefix, \"--dropdown-link\")\n  }, itemText));\n};\n\nDropdownItem.propTypes = {\n  /**\n   * Specify the value of the <DropdownItem>\n   */\n  value: PropTypes.string.isRequired,\n\n  /**\n   * Specify the content of the <DropdownItem>\n   */\n  itemText: PropTypes.string.isRequired,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide an optional function to be called when the container node is\n   * clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Provide an optional function to be called when a key is pressed on the <DropdownItem>\n   */\n  onKeyPress: PropTypes.func,\n\n  /**\n   * Optional string representing the link location for the <DropdownItem>\n   */\n  href: PropTypes.string,\n\n  /**\n   * Specify whether the <DropdownItem> is selected\n   */\n  selected: PropTypes.bool\n};\nDropdownItem.defaultProps = {\n  onClick:\n  /* istanbul ignore next */\n  function onClick() {},\n  onKeyPress:\n  /* istanbul ignore next */\n  function onKeyPress() {},\n  href: '',\n  selected: false\n};\nexport default DropdownItem;","map":null,"metadata":{},"sourceType":"module"}