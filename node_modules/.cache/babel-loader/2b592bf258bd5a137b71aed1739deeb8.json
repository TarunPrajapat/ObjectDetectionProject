{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport cx from 'classnames';\nimport Downshift from 'downshift';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { settings } from 'carbon-components';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\nvar prefix = settings.prefix;\n\nvar defaultItemToString = function defaultItemToString(item) {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item && item.label;\n};\n\nvar defaultShouldFilterItem = function defaultShouldFilterItem() {\n  return true;\n};\n\nvar getInputValue = function getInputValue(props, state) {\n  if (props.initialSelectedItem) {\n    return props.itemToString(props.initialSelectedItem);\n  }\n\n  return state.inputValue || '';\n};\n\nvar findHighlightedIndex = function findHighlightedIndex(_ref, inputValue) {\n  var items = _ref.items,\n      itemToString = _ref.itemToString;\n\n  if (!inputValue) {\n    return -1;\n  }\n\n  var searchValue = inputValue.toLowerCase();\n\n  for (var i = 0; i < items.length; i++) {\n    var item = itemToString(items[i]).toLowerCase();\n\n    if (item.indexOf(searchValue) !== -1) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nvar ComboBox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ComboBox, _React$Component);\n\n  function ComboBox(props) {\n    var _this;\n\n    _classCallCheck(this, ComboBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ComboBox).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"filterItems\", function (items, itemToString, inputValue) {\n      return items.filter(function (item) {\n        return _this.props.shouldFilterItem({\n          item: item,\n          itemToString: itemToString,\n          inputValue: inputValue\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleOnChange\", function (selectedItem) {\n      if (_this.props.onChange) {\n        _this.props.onChange({\n          selectedItem: selectedItem\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleOnInputKeyDown\", function (event) {\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleOnInputValueChange\", function (inputValue, _ref2) {\n      var setHighlightedIndex = _ref2.setHighlightedIndex;\n      var onInputChange = _this.props.onInputChange;\n      setHighlightedIndex(findHighlightedIndex(_this.props, inputValue));\n\n      _this.setState(function () {\n        return {\n          // Default to empty string if we have a false-y `inputValue`\n          inputValue: inputValue || ''\n        };\n      }, function () {\n        if (onInputChange) {\n          onInputChange(inputValue);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onToggleClick\", function (isOpen) {\n      return function (event) {\n        if (event.target === _this.textInput.current && isOpen) {\n          event.preventDownshiftDefault = true;\n          event.persist();\n        }\n      };\n    });\n\n    _this.textInput = React.createRef();\n    _this.state = {\n      inputValue: getInputValue(props, {})\n    };\n    return _this;\n  }\n\n  _createClass(ComboBox, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      this.setState(function (state) {\n        return {\n          inputValue: getInputValue(nextProps, state)\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          containerClassName = _this$props.className,\n          disabled = _this$props.disabled,\n          id = _this$props.id,\n          items = _this$props.items,\n          itemToString = _this$props.itemToString,\n          placeholder = _this$props.placeholder,\n          initialSelectedItem = _this$props.initialSelectedItem,\n          ariaLabel = _this$props.ariaLabel,\n          translateWithId = _this$props.translateWithId,\n          invalid = _this$props.invalid,\n          invalidText = _this$props.invalidText,\n          light = _this$props.light,\n          type = _this$props.type,\n          shouldFilterItem = _this$props.shouldFilterItem,\n          onChange = _this$props.onChange,\n          onInputChange = _this$props.onInputChange,\n          rest = _objectWithoutProperties(_this$props, [\"className\", \"disabled\", \"id\", \"items\", \"itemToString\", \"placeholder\", \"initialSelectedItem\", \"ariaLabel\", \"translateWithId\", \"invalid\", \"invalidText\", \"light\", \"type\", \"shouldFilterItem\", \"onChange\", \"onInputChange\"]);\n\n      var className = cx(\"\".concat(prefix, \"--form-item\"), \"\".concat(prefix, \"--combo-box\"), containerClassName);\n      return React.createElement(Downshift, {\n        onChange: this.handleOnChange,\n        onInputValueChange: this.handleOnInputValueChange,\n        inputValue: this.state.inputValue || '',\n        itemToString: itemToString,\n        defaultSelectedItem: initialSelectedItem\n      }, function (_ref3) {\n        var getButtonProps = _ref3.getButtonProps,\n            getInputProps = _ref3.getInputProps,\n            getItemProps = _ref3.getItemProps,\n            getRootProps = _ref3.getRootProps,\n            isOpen = _ref3.isOpen,\n            inputValue = _ref3.inputValue,\n            selectedItem = _ref3.selectedItem,\n            highlightedIndex = _ref3.highlightedIndex,\n            clearSelection = _ref3.clearSelection;\n        return React.createElement(ListBox, _extends({\n          className: className,\n          disabled: disabled,\n          invalid: invalid,\n          invalidText: invalidText,\n          light: light\n        }, getRootProps({\n          refKey: 'innerRef'\n        })), React.createElement(ListBox.Field, getButtonProps({\n          disabled: disabled,\n          onClick: _this2.onToggleClick(isOpen)\n        }), React.createElement(\"input\", _extends({\n          className: \"\".concat(prefix, \"--text-input\"),\n          \"aria-label\": ariaLabel,\n          ref: _this2.textInput\n        }, rest, getInputProps({\n          disabled: disabled,\n          id: id,\n          placeholder: placeholder,\n          onKeyDown: _this2.handleOnInputKeyDown\n        }))), inputValue && React.createElement(ListBox.Selection, {\n          clearSelection: clearSelection,\n          translateWithId: translateWithId\n        }), React.createElement(ListBox.MenuIcon, {\n          isOpen: isOpen,\n          translateWithId: translateWithId\n        })), isOpen && React.createElement(ListBox.Menu, null, _this2.filterItems(items, itemToString, inputValue).map(function (item, index) {\n          return React.createElement(ListBox.MenuItem, _extends({\n            key: itemToString(item),\n            isActive: selectedItem === item,\n            isHighlighted: highlightedIndex === index || selectedItem && selectedItem.id === item.id || false\n          }, getItemProps({\n            item: item,\n            index: index\n          })), itemToString(item));\n        })));\n      });\n    }\n  }]);\n\n  return ComboBox;\n}(React.Component);\n\n_defineProperty(ComboBox, \"propTypes\", {\n  /**\n   * An optional className to add to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify if the control should be disabled, or not\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify a custom `id` for the input\n   */\n  id: PropTypes.string,\n\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component when a specific dropdown item is selected.\n   * @param {{ selectedItem }}\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Used to provide a placeholder text node before a user enters any input.\n   * This is only present if the control has no items selected\n   */\n  placeholder: PropTypes.string.isRequired,\n\n  /**\n   * Specify your own filtering logic by passing in a `shouldFilterItem`\n   * function that takes in the current input and an item and passes back\n   * whether or not the item should be filtered.\n   */\n  shouldFilterItem: PropTypes.func,\n\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Specify a custom translation function that takes in a message identifier\n   * and returns the localized string for the message\n   */\n  translateWithId: PropTypes.func,\n\n  /**\n   * Currently supports either the default type, or an inline variant\n   */\n  type: ListBoxPropTypes.ListBoxType,\n\n  /**\n   * Callback function to notify consumer when the text input changes.\n   * This provides support to change available items based on the text.\n   * @param {string} inputText\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * should use \"light theme\" (white background)?\n   */\n  light: PropTypes.bool\n});\n\n_defineProperty(ComboBox, \"defaultProps\", {\n  disabled: false,\n  itemToString: defaultItemToString,\n  shouldFilterItem: defaultShouldFilterItem,\n  type: 'default',\n  ariaLabel: 'ListBox input field',\n  light: false\n});\n\nexport { ComboBox as default };","map":null,"metadata":{},"sourceType":"module"}