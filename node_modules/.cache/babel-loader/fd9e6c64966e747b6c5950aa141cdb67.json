{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { iconInfoGlyph } from 'carbon-icons';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport { settings } from 'carbon-components';\nimport Icon from '../Icon';\nvar prefix = settings.prefix;\nvar didWarnAboutDeprecation = false;\n\nvar TooltipSimple = function TooltipSimple(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      position = _ref.position,\n      text = _ref.text,\n      showIcon = _ref.showIcon,\n      icon = _ref.icon,\n      iconName = _ref.iconName,\n      iconDescription = _ref.iconDescription,\n      other = _objectWithoutProperties(_ref, [\"children\", \"className\", \"position\", \"text\", \"showIcon\", \"icon\", \"iconName\", \"iconDescription\"]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    process.env.NODE_ENV !== \"production\" ? warning(didWarnAboutDeprecation, 'The `TooltipSimple` component has been deprecated and will be removed ' + 'in the next major release of `carbon-components-react`. Please use ' + '`TooltipDefinition` or `TooltipIcon` instead.') : void 0;\n    didWarnAboutDeprecation = true;\n  }\n\n  var tooltipClasses = classNames(\"\".concat(prefix, \"--tooltip--simple__\").concat(position));\n  var tooltipWrapperClasses = classNames(\"\".concat(prefix, \"--tooltip--simple\"), className);\n  return React.createElement(\"div\", {\n    className: tooltipWrapperClasses\n  }, showIcon ? React.createElement(React.Fragment, null, children, React.createElement(\"div\", _extends({\n    className: tooltipClasses,\n    \"data-tooltip-text\": text,\n    tabIndex: \"0\",\n    role: \"button\"\n  }, other), React.createElement(Icon, {\n    role: \"img\",\n    icon: !icon && !iconName ? iconInfoGlyph : icon,\n    name: iconName,\n    description: iconDescription\n  }))) : React.createElement(\"div\", _extends({\n    className: tooltipClasses,\n    \"data-tooltip-text\": text,\n    tabIndex: \"0\",\n    role: \"button\"\n  }, other), children));\n};\n\nTooltipSimple.propTypes = {\n  /**\n   * The content to put into the trigger UI, except the (default) tooltip icon.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The CSS class names of the tooltip.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Where to put the tooltip, relative to the trigger UI.\n   */\n  position: PropTypes.oneOf(['bottom', 'top']),\n\n  /**\n   * Contents to put into the tooltip.\n   */\n  text: PropTypes.string.isRequired,\n\n  /**\n   * `true` to show the default tooltip icon.\n   */\n  showIcon: PropTypes.bool,\n\n  /**\n   * The the default tooltip icon.\n   */\n  icon: PropTypes.shape({\n    width: PropTypes.string,\n    height: PropTypes.string,\n    viewBox: PropTypes.string.isRequired,\n    svgData: PropTypes.object.isRequired\n  }),\n\n  /**\n   * The name of the default tooltip icon.\n   */\n  iconName: PropTypes.string,\n\n  /**\n   * The description of the default tooltip icon, to be put in its SVG `<title>` element.\n   */\n  iconDescription: PropTypes.string\n};\nTooltipSimple.defaultProps = {\n  position: 'top',\n  showIcon: true,\n  iconDescription: 'tooltip',\n  text: 'Provide text'\n};\nexport default TooltipSimple;","map":null,"metadata":{},"sourceType":"module"}