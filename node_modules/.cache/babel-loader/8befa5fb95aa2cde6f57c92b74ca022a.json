{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n};\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Toolbar, _mixin);\n  /**\n   * Toolbar.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as an toolbar.\n   */\n\n\n  function Toolbar(element, options) {\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Toolbar).call(this, element, options));\n\n    if (!_this.element.dataset.tableTarget) {\n      console.warn('There is no table bound to this toolbar!'); // eslint-disable-line no-console\n    } else {\n      var boundTable = _this.element.ownerDocument.querySelector(_this.element.dataset.tableTarget);\n\n      var rowHeightBtns = _this.element.querySelector(_this.options.selectorRowHeight);\n\n      if (rowHeightBtns) {\n        _this.manage(on(rowHeightBtns, 'click', function (event) {\n          _this._handleRowHeightChange(event, boundTable);\n        })); // toArray(this.element.querySelectorAll(this.options.selectorRowHeight)).forEach((item) => {\n        //   item.addEventListener('click', (event) => { this._handleRowHeightChange(event, boundTable); });\n        // });\n\n      }\n    }\n\n    _this.manage(on(_this.element.ownerDocument, 'keydown', function (evt) {\n      _this._handleKeyDown(evt);\n    }));\n\n    _this.manage(on(_this.element.ownerDocument, 'click', function (evt) {\n      _this._handleDocumentClick(evt);\n    }));\n\n    return _this;\n  }\n  /**\n   * Handles toggling of active state of the toolbar search input\n   * @param {Event} event The event triggering this method.\n   */\n\n\n  _createClass(Toolbar, [{\n    key: \"_handleDocumentClick\",\n    value: function _handleDocumentClick(event) {\n      var _this2 = this;\n\n      var searchInput = eventMatches(event, this.options.selectorSearch);\n      var isOfSelfSearchInput = searchInput && this.element.contains(searchInput);\n\n      if (isOfSelfSearchInput) {\n        var shouldBeOpen = isOfSelfSearchInput && !this.element.classList.contains(this.options.classSearchActive);\n        searchInput.classList.toggle(this.options.classSearchActive, shouldBeOpen);\n\n        if (shouldBeOpen) {\n          searchInput.querySelector('input').focus();\n        }\n      }\n\n      var targetComponentElement = eventMatches(event, this.options.selectorInit);\n      toArray(this.element.ownerDocument.querySelectorAll(this.options.selectorSearch)).forEach(function (item) {\n        if (!targetComponentElement || !targetComponentElement.contains(item)) {\n          item.classList.remove(_this2.options.classSearchActive);\n        }\n      });\n    }\n    /**\n     * Handles toggling of active state of the toolbar search input via the keyboard\n     * @param {Event} event The event triggering this method.\n     */\n\n  }, {\n    key: \"_handleKeyDown\",\n    value: function _handleKeyDown(event) {\n      var searchInput = eventMatches(event, this.options.selectorSearch);\n\n      if (searchInput && event.which === 27) {\n        searchInput.classList.remove(this.options.classSearchActive);\n      }\n    }\n    /**\n     * Handles toggling of the row height of the associated table\n     * @param {Event} event The event triggering this method.\n     * @param {HTMLElement} boundTable The table associated with the toolbar.\n     */\n\n  }, {\n    key: \"_handleRowHeightChange\",\n    value: function _handleRowHeightChange(event, boundTable) {\n      var value = event.currentTarget.querySelector('input:checked').value;\n\n      if (value === 'tall') {\n        boundTable.classList.add(this.options.classTallRows);\n      } else {\n        boundTable.classList.remove(this.options.classTallRows);\n      }\n    }\n    /**\n     * The map associating DOM element and Toolbar UI instance.\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * properties in this object are overriden for the instance being created.\n     * @property {string} selectorInit The CSS selector to find toolbar instances.\n     * @property {string} selectorSearch The CSS selector to find search inputs in a toolbar.\n     * @property {string} selectorRowHeight The CSS selector to find the row height inputs in a toolbar.\n     * @property {string} classTallRows The CSS class for making table rows into tall rows.\n     * @property {string} classSearchActive The CSS class the active state of the search input.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-toolbar]',\n        selectorSearch: '[data-toolbar-search]',\n        selectorRowHeight: '[data-row-height]',\n        classTallRows: \"\".concat(prefix, \"--responsive-table--tall\"),\n        classSearchActive: \"\".concat(prefix, \"--toolbar-search--active\")\n      };\n    }\n  }]);\n\n  Toolbar.components = new WeakMap();\n  return Toolbar;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nexport default Toolbar;","map":null,"metadata":{},"sourceType":"module"}