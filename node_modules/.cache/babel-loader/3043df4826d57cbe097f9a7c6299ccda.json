{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nexport default function (ToMix) {\n  /**\n   * Mix-in class to manage events associated with states.\n   * @class EventedState\n   */\n  var EventedState =\n  /*#__PURE__*/\n  function (_ToMix) {\n    _inherits(EventedState, _ToMix);\n\n    function EventedState() {\n      _classCallCheck(this, EventedState);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(EventedState).apply(this, arguments));\n    }\n\n    _createClass(EventedState, [{\n      key: \"_changeState\",\n      // eslint-disable-next-line jsdoc/check-param-names\n\n      /**\n       * The internal implementation for {@link EventedState#changeState `.changeState()`}, performing actual change in state.\n       * @param {string} [state] The new state. Can be an omitted, which means toggling.\n       * @param {Object} [detail]\n       *   The object that should be put to event details that is fired before/after changing state.\n       *   Can have a `group` property, which specifies what state to be changed.\n       * @param {EventedState~changeStateCallback} callback The callback called once changing state is finished or is canceled.\n       * @private\n       */\n      value: function _changeState() {\n        throw new Error('_changeState() should be overriden to perform actual change in state.');\n      } // eslint-disable-next-line jsdoc/check-param-names\n\n      /**\n       * Changes the state of this component.\n       * @param {string} [state] The new state. Can be an omitted, which means toggling.\n       * @param {Object} [detail]\n       *   The object that should be put to event details that is fired before/after changing state.\n       *   Can have a `group` property, which specifies what state to be changed.\n       * @param {EventedState~changeStateCallback} [callback] The callback called once changing state is finished or is canceled.\n       */\n\n    }, {\n      key: \"changeState\",\n      value: function changeState() {\n        var _this = this;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var state = typeof args[0] === 'string' ? args.shift() : undefined;\n        var detail = Object(args[0]) === args[0] && typeof args[0] !== 'function' ? args.shift() : undefined;\n        var callback = typeof args[0] === 'function' ? args.shift() : undefined;\n\n        if (typeof this.shouldStateBeChanged === 'function' && !this.shouldStateBeChanged(state, detail)) {\n          if (callback) {\n            callback(null, true);\n          }\n\n          return;\n        }\n\n        var data = {\n          group: detail && detail.group,\n          state: state\n        };\n        var eventNameSuffix = [data.group, state].filter(Boolean).join('-').split('-') // Group or state may contain hyphen\n        .map(function (item) {\n          return item[0].toUpperCase() + item.substr(1);\n        }).join('');\n        var eventStart = new CustomEvent(this.options[\"eventBefore\".concat(eventNameSuffix)], {\n          bubbles: true,\n          cancelable: true,\n          detail: detail\n        });\n        var fireOnNode = detail && detail.delegatorNode || this.element;\n        var canceled = !fireOnNode.dispatchEvent(eventStart);\n\n        if (canceled) {\n          if (callback) {\n            var error = new Error(\"Changing state (\".concat(JSON.stringify(data), \") has been canceled.\"));\n            error.canceled = true;\n            callback(error);\n          }\n        } else {\n          var changeStateArgs = [state, detail].filter(Boolean);\n\n          this._changeState.apply(this, _toConsumableArray(changeStateArgs).concat([function () {\n            fireOnNode.dispatchEvent(new CustomEvent(_this.options[\"eventAfter\".concat(eventNameSuffix)], {\n              bubbles: true,\n              cancelable: true,\n              detail: detail\n            }));\n\n            if (callback) {\n              callback();\n            }\n          }]));\n        }\n      }\n      /**\n       * Tests if change in state should happen or not.\n       * Classes inheriting {@link EventedState `EventedState`} should override this function.\n       * @function EventedState#shouldStateBeChanged\n       * @param {string} [state] The new state. Can be an omitted, which means toggling.\n       * @param {Object} [detail]\n       *   The object that should be put to event details that is fired before/after changing state.\n       *   Can have a `group` property, which specifies what state to be changed.\n       * @returns {boolean}\n       *   `false` if change in state shouldn't happen, e.g. when the given new state is the same as the current one.\n       */\n\n    }]);\n\n    return EventedState;\n  }(ToMix);\n  /**\n   * The callback called once changing state is finished or is canceled.\n   * @callback EventedState~changeStateCallback\n   * @param {Error} error\n   *   An error object with `true` in its `canceled` property if changing state is canceled.\n   *   Cancellation happens if the handler of a custom event, that is fired before changing state happens,\n   *   calls `.preventDefault()` against the event.\n   * @param {boolean} keptState\n   *   `true` if the call to {@link EventedState#changeState `.changeState()`} didn't cause actual change in state.\n   */\n\n\n  return EventedState;\n}","map":null,"metadata":{},"sourceType":"module"}