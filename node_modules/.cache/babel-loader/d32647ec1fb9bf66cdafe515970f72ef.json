{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport warning from 'warning';\nimport { breakingChangesX } from '../../globals/js/feature-flags';\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\nimport removedComponent from '../removed-component';\nvar didWarnAboutDeprecation;\n\nvar toArray = function toArray(arrayLike) {\n  return Array.prototype.slice.call(arrayLike);\n};\n\nvar LeftNav =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(LeftNav, _mixin);\n  /**\n   * Left Navigation.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a left navigation.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n   * @param {string} [options.selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n   * @param {string} [options.selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n   * @param {string} [options.selectorLeftNavToggle]\n   *   The data attribute selector for the button that will show and hide the left navigation.\n   * @param {string} [options.selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n   * @param {string} [options.selectorLeftNavNestedListItem]\n   *   The data attribute selector for all nested list items in the left navigation.\n   * @param {string} [options.selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n   * @param {string} [options.selectorLeftNavSection]\n   *   The data attribute selector for the three sections in the header of the left nav.\n   * @param {string} [options.selectorLeftNavCurrentPage]\n   *   The data attribute selector for the current section title in the left nav header.\n   * @param {string} [options.selectorLeftNavMainNavHidden] The CSS selector for the hidden main nav.\n   * @param {string} [options.classActiveLeftNav] The class name for when a left nav is active.\n   * @param {string} [options.classActiveLeftNavListItem] The class name for when a left nav list item is active.\n   * @param {string} [options.classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n   * @param {string} [options.classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n   * @param {string} [options.classActiveSection] The class name for an active section item in the left nav header.\n   * @param {string} [options.classItemHasChildren] The class name for when a list item has children.\n   * @param {string} [options.classTaxonomyIcon] The class name for the taxonomy icon.\n   */\n\n\n  function LeftNav(element, options) {\n    var _this;\n\n    _classCallCheck(this, LeftNav);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeftNav).call(this, element, options));\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(didWarnAboutDeprecation, 'The `LeftNav` component in `carbon-components` has been deprecated. It will be removed in the next major release.') : void 0;\n      didWarnAboutDeprecation = true;\n    }\n\n    _this.leftNavSectionActive = false;\n\n    _this.hookOpenActions();\n\n    _this.hookListSectionEvents();\n\n    _this.hookListItemsEvents();\n\n    _this.manage(on(_this.element.ownerDocument, 'click', function (evt) {\n      _this.handleDocumentClick(evt);\n    }));\n\n    return _this;\n  }\n  /**\n   * Closes the menu.\n   */\n\n\n  _createClass(LeftNav, [{\n    key: \"closeMenu\",\n    value: function closeMenu() {\n      this.element.classList.remove(this.options.classActiveLeftNav);\n      var toggleOpenNode = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen);\n      toggleOpenNode.classList.remove(this.options.classActiveTrigger);\n      this.element.querySelector(this.options.selectorLeftNav).parentNode.setAttribute('aria-expanded', 'false');\n    }\n    /**\n     * Toggles the menu to open and close.\n     */\n\n  }, {\n    key: \"toggleMenu\",\n    value: function toggleMenu() {\n      var leftNavContainer = this.element.querySelector(this.options.selectorLeftNav).parentNode;\n      this.element.classList.toggle(this.options.classActiveLeftNav);\n      var toggleOpenNode = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen);\n      toggleOpenNode.classList.toggle(this.options.classActiveTrigger);\n      if (leftNavContainer.getAttribute('aria-expanded') === 'false') leftNavContainer.setAttribute('aria-expanded', 'true');else leftNavContainer.setAttribute('aria-expanded', 'false');\n    }\n    /**\n     * Adds a transitional animation to the navSection\n     */\n\n  }, {\n    key: \"animateNavSection\",\n    value: function animateNavSection(selectedNav) {\n      var _this2 = this;\n\n      var selectedNavValue = selectedNav.dataset.leftNavSection;\n      var selectedNavLink = selectedNav.querySelector(this.options.selectorLeftNavSectionLink);\n      var leftNav = this.element.querySelector(this.options.selectorLeftNav);\n      var leftNavSections = this.element.querySelector(this.options.selectorLeftNavSections);\n      selectedNav.classList.remove(this.options.classNavSection);\n      selectedNav.classList.remove(\"\".concat(this.options.classNavSection, \"--\").concat(selectedNavValue));\n      selectedNav.classList.add(this.options.classNavSectionTransition);\n\n      if (leftNavSections.children[0] === selectedNav) {\n        selectedNav.classList.add(\"\".concat(this.options.classNavSectionTransition, \"--50\")); // First child only move 50px\n      } else {\n        selectedNav.classList.add(\"\".concat(this.options.classNavSectionTransition, \"--100\")); // Second move 100px\n      }\n\n      selectedNav.setAttribute('data-left-nav-section', selectedNavValue);\n      /* Not sure what trick more performant */\n\n      setTimeout(function () {\n        selectedNav.classList.add(\"\".concat(_this2.options.classNavSectionTransition, \"--0\"));\n      }, 100); // Could probably use a promise here\n\n      selectedNavLink.classList.remove(this.options.classNavSectionLink);\n      selectedNavLink.classList.add(this.options.classNavHeaderTitle);\n      selectedNavLink.setAttribute('data-left-nav-current-section-title', '');\n      selectedNavLink.removeAttribute('data-left-nav-section-link');\n      this.element.insertBefore(selectedNav, leftNav);\n    }\n    /**\n     * Adds a transitional animation to the navigation items on nav section click\n     */\n\n  }, {\n    key: \"animateNavList\",\n    value: function animateNavList(selectedNavTitle) {\n      var _this3 = this;\n\n      var currentLeftNavList = this.element.querySelector(\"\".concat(this.options.selectorLeftNavList, \":not(\").concat(this.options.selectorLeftNavMainNavHidden, \")\"));\n      var newLeftNavList = this.element.querySelector(\"[data-left-nav-list=\".concat(selectedNavTitle, \"]\"));\n      var currentLeftNavItems = toArray(currentLeftNavList.querySelectorAll(this.options.selectorLeftNavListItem)).reverse();\n      var newLeftNavItems = toArray(newLeftNavList.querySelectorAll(this.options.selectorLeftNavListItem));\n      var fadeOutTime = 300;\n      var counter = 0;\n      var counterIteration = fadeOutTime / currentLeftNavItems.length; // Length of animation divided by number of items\n\n      currentLeftNavItems.forEach(function (item) {\n        item.setAttribute('tabIndex', '-1');\n        setTimeout(function () {\n          item.classList.add(_this3.options.classItemFade);\n        }, counter);\n        counter += counterIteration;\n      });\n      newLeftNavItems.forEach(function (item) {\n        item.setAttribute('tabIndex', '0');\n        item.classList.remove(_this3.options.classItemFade);\n      });\n      setTimeout(function () {\n        currentLeftNavList.classList.add(_this3.options.classListHidden);\n        currentLeftNavList.classList.add(_this3.options.classListTop);\n        currentLeftNavList.setAttribute('aria-hidden', 'true');\n        newLeftNavList.classList.remove(_this3.options.classListHidden);\n        setTimeout(function () {\n          newLeftNavList.classList.remove(_this3.options.classListTop);\n        }, 100);\n        newLeftNavList.setAttribute('aria-hidden', 'false');\n      }, fadeOutTime + 100); // Wait for items to fade out.\n    }\n  }, {\n    key: \"hookOpenActions\",\n    value: function hookOpenActions() {\n      var _this4 = this;\n\n      var openBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen);\n      var closeBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleClose);\n      this.manage(on(openBtn, 'click', function () {\n        _this4.element.tabIndex = '0';\n\n        _this4.toggleMenu();\n      }));\n      this.manage(on(openBtn, 'keydown', function (evt) {\n        if (evt.which === 13) {\n          _this4.element.tabIndex = '0';\n\n          _this4.toggleMenu();\n        }\n      }));\n\n      if (closeBtn) {\n        this.manage(on(closeBtn, 'click', function () {\n          _this4.element.tabIndex = '-1';\n\n          _this4.closeMenu();\n        }));\n        this.manage(on(closeBtn, 'keydown', function (evt) {\n          if (evt.which === 13) {\n            _this4.element.tabIndex = '-1';\n\n            _this4.closeMenu();\n          }\n        }));\n      }\n\n      this.manage(on(this.element.ownerDocument, 'keydown', function (evt) {\n        if (evt.which === 27 && _this4.element.classList.contains(_this4.options.classActiveLeftNav)) {\n          _this4.closeMenu();\n        }\n      }));\n    }\n    /**\n     * Addes Event listeners to list sections\n     */\n\n  }, {\n    key: \"hookListSectionEvents\",\n    value: function hookListSectionEvents() {\n      var _this5 = this;\n\n      var leftNavSections = this.element.querySelector(this.options.selectorLeftNavSections);\n      this.manage(on(leftNavSections, 'click', function (evt) {\n        _this5.handleSectionItemClick(evt, leftNavSections);\n      }));\n      this.manage(on(leftNavSections, 'keydown', function (evt) {\n        if (evt.which === 13) {\n          _this5.handleSectionItemClick(evt, leftNavSections);\n\n          _this5.element.querySelector(_this5.options.selectorLeftNavCurrentSectionTitle).focus();\n        }\n      }));\n    }\n    /**\n     * Adds event listeners to list items\n     */\n\n  }, {\n    key: \"hookListItemsEvents\",\n    value: function hookListItemsEvents() {\n      var _this6 = this;\n\n      var leftNavList = toArray(this.element.querySelectorAll(this.options.selectorLeftNavList));\n      leftNavList.forEach(function (list) {\n        _this6.manage(on(list, 'click', function (evt) {\n          var leftNavItem = eventMatches(evt, _this6.options.selectorLeftNavListItem);\n\n          if (leftNavItem) {\n            var childItem = eventMatches(evt, _this6.options.selectorLeftNavNestedListItem);\n            var hasChildren = eventMatches(evt, _this6.options.selectorLeftNavListItemHasChildren);\n            var flyoutItem = eventMatches(evt, _this6.options.selectorLeftNavFlyoutItem);\n\n            if (flyoutItem) {\n              _this6.addActiveListItem(flyoutItem);\n            } else if (childItem) {\n              if (childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu)) {\n                var flyoutMenu = childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu);\n                flyoutMenu.classList.toggle(_this6.options.classFlyoutDisplayed);\n              } else {\n                _this6.addActiveListItem(childItem);\n              }\n            } else if (hasChildren) {\n              _this6.handleNestedListClick(leftNavItem);\n            } else {\n              _this6.addActiveListItem(leftNavItem);\n            }\n          }\n        }));\n\n        _this6.manage(on(list, 'keydown', function (evt) {\n          if (evt.which === 13) {\n            var leftNavItem = eventMatches(evt, _this6.options.selectorLeftNavListItem);\n\n            if (leftNavItem) {\n              var childItem = eventMatches(evt, _this6.options.selectorLeftNavNestedListItem);\n              var hasChildren = eventMatches(evt, _this6.options.selectorLeftNavListItemHasChildren);\n              var flyoutItem = eventMatches(evt, _this6.options.selectorLeftNavFlyoutItem);\n              var hasLinkItem = !(leftNavItem.querySelector(_this6.options.selectorLeftNavListItemLink) === undefined);\n\n              if (flyoutItem) {\n                _this6.addActiveListItem(flyoutItem);\n              } else if (childItem) {\n                if (!childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu)) {\n                  _this6.addActiveListItem(childItem);\n                } else {\n                  childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'false');\n                  childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.top = \"\".concat(childItem.offsetTop - _this6.element.querySelector(_this6.options.selectorLeftNav).scrollTop, \"px\");\n                  childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.left = \"\".concat(childItem.offsetLeft + Math.round(childItem.offsetWidth), \"px\");\n                }\n              } else if (hasChildren) {\n                _this6.handleNestedListClick(leftNavItem);\n              } else if (hasLinkItem) {\n                var link = leftNavItem.querySelector(_this6.options.selectorLeftNavListItemLink);\n                link.click();\n              } else {\n                _this6.addActiveListItem(leftNavItem);\n              }\n            }\n          }\n        }));\n      });\n      var flyouts = toArray(this.element.ownerDocument.querySelectorAll(this.options.selectorLeftNavListItemHasFlyout));\n      flyouts.forEach(function (flyout) {\n        _this6.manage(on(flyout, 'mouseenter', function () {\n          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'false'); // eslint-disable-next-line no-param-reassign\n\n          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.top = \"\".concat(flyout.offsetTop - _this6.element.querySelector(_this6.options.selectorLeftNav).scrollTop, \"px\"); // eslint-disable-next-line no-param-reassign\n\n          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.left = \"\".concat(flyout.offsetLeft + Math.round(flyout.offsetWidth), \"px\");\n          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).classList.toggle(_this6.options.classFlyoutDisplayed);\n        }));\n\n        _this6.manage(on(flyout, 'mouseleave', function () {\n          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'true');\n          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).classList.remove(_this6.options.classFlyoutDisplayed);\n        }));\n      });\n    }\n    /**\n     * Hides all flyout menus.\n     */\n\n  }, {\n    key: \"hideAllFlyoutMenus\",\n    value: function hideAllFlyoutMenus() {\n      var _this7 = this;\n\n      var flyoutMenus = toArray(this.element.querySelectorAll(this.options.selectorLeftNavFlyoutMenu));\n      flyoutMenus.forEach(function (menu) {\n        menu.setAttribute('aria-hidden', 'true');\n        menu.classList.remove(_this7.options.classFlyoutDisplayed);\n      });\n    }\n    /**\n     * Sets a list item as active.\n     * @param {Object} item The active list item.\n     */\n\n  }, {\n    key: \"addActiveListItem\",\n    value: function addActiveListItem(item) {\n      var _this8 = this;\n\n      toArray(this.element.querySelectorAll(this.options.selectorLeftNavAllListItems)).forEach(function (currentItem) {\n        if (!(item === currentItem)) {\n          if (!currentItem.contains(item)) {\n            currentItem.classList.remove(_this8.options.classActiveLeftNavListItem);\n          } else {\n            currentItem.classList.add(_this8.options.classActiveLeftNavListItem);\n          }\n        }\n      });\n      toArray(this.element.querySelectorAll(this.options.selectorLeftNavNestedListItem)).forEach(function (currentItem) {\n        if (!(item === currentItem)) {\n          currentItem.classList.remove(_this8.options.classActiveLeftNavListItem);\n        }\n      });\n      item.classList.add(this.options.classActiveLeftNavListItem);\n      this.closeMenu();\n      this.hideAllFlyoutMenus();\n      this.closeMenu();\n    }\n    /**\n     * Handles click on the document.\n     * Closes the left navigation when document is clicked outside the left navigation.\n     * @param {Event} evt The event triggering this method.\n     */\n\n  }, {\n    key: \"handleDocumentClick\",\n    value: function handleDocumentClick(evt) {\n      var clickTarget = evt.target;\n      var isOfSelf = this.element.contains(clickTarget);\n      var isToggleBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen).contains(clickTarget);\n      var isOpen = this.element.classList.contains(this.options.classActiveLeftNav);\n      var isUnifiedHeader = this.element.ownerDocument.querySelector('[data-unified-header]').contains(clickTarget);\n      var shouldClose = !isOfSelf && isOpen && !isToggleBtn && !isUnifiedHeader;\n      var flyoutOpen;\n\n      if (this.element.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n        var leftnavFlyoutMenu = this.element.querySelector(this.options.selectorLeftNavFlyoutMenu);\n        flyoutOpen = leftnavFlyoutMenu.classList.contains(this.options.classFlyoutDisplayed);\n      }\n\n      if (isOfSelf && this.element.tagName === 'A') {\n        evt.preventDefault();\n      }\n\n      if (shouldClose) {\n        this.closeMenu();\n      }\n\n      if (this.element.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n        if (flyoutOpen && !isOfSelf && isOpen) {\n          this.element.querySelector(this.options.selectorLeftNavFlyoutMenu).classList.remove(this.options.classFlyoutDisplayed);\n        }\n      }\n    }\n    /**\n     * Handles click on a list item that contains a nested list in the left navigation.\n     * It hides all flyout menus and switches the tab-index on the list items based on whether or not the list is expanded.\n     * @param {HTMLElement} listItem The list item that was clicked.\n     */\n\n  }, {\n    key: \"handleNestedListClick\",\n    value: function handleNestedListClick(listItem) {\n      var _this9 = this;\n\n      var isOpen = listItem.classList.contains(this.options.classExpandedLeftNavListItem);\n      this.hideAllFlyoutMenus();\n      listItem.classList.toggle(this.options.classExpandedLeftNavListItem, !isOpen);\n      var listItems = toArray(listItem.querySelectorAll(this.options.selectorLeftNavNestedListItem));\n      listItems.forEach(function (item) {\n        if (isOpen) {\n          listItem.querySelector(_this9.options.selectorLeftNavNestedList).setAttribute('aria-hidden', 'true'); // eslint-disable-next-line no-param-reassign\n\n          item.querySelector(_this9.options.selectorLeftNavListItemLink).tabIndex = -1;\n        } else {\n          listItem.querySelector(_this9.options.selectorLeftNavNestedList).setAttribute('aria-hidden', 'false'); // eslint-disable-next-line no-param-reassign\n\n          item.querySelector(_this9.options.selectorLeftNavListItemLink).tabIndex = 0;\n        }\n      });\n    }\n  }, {\n    key: \"handleSectionItemClick\",\n    value: function handleSectionItemClick(evt, leftNavSections) {\n      var _this10 = this; // Sorry\n\n\n      var leftNavSectionItem = eventMatches(evt, this.options.selectorLeftNavSection);\n\n      if (leftNavSectionItem) {\n        // currently selected\n        var selectedLeftNavSectionItem = this.element.querySelector(this.options.selectorLeftNavCurrentSection);\n        var selectedLeftNavSectionItemTitle = selectedLeftNavSectionItem.querySelector(this.options.selectorLeftNavCurrentSectionTitle);\n        var selectedLeftNavSectionItemIcon = this.element.querySelector(this.options.selectorLeftNavCurrentSectionIcon);\n        var selectedLeftNavSectionItemUse = selectedLeftNavSectionItemIcon.querySelector('use');\n        var selectedLeftNavSectionValue = selectedLeftNavSectionItem.dataset.leftNavCurrentSection; // clicked on item\n\n        var leftNavSectionItemLink = leftNavSectionItem.querySelector(this.options.selectorLeftNavSectionLink);\n        var leftNavSectionItemIcon = leftNavSectionItem.querySelector(this.options.selectorLeftNavSectionIcon);\n        var leftNavSectionItemIconUse = leftNavSectionItemIcon.querySelector('use');\n        var leftNavSectionValue = leftNavSectionItem.dataset.leftNavSection;\n\n        if (this.leftNavSectionActive) {\n          return;\n        }\n\n        this.leftNavSectionActive = true;\n        var newLeftNavSectionItem = document.createElement('li');\n        newLeftNavSectionItem.setAttribute('data-left-nav-section', selectedLeftNavSectionValue);\n        newLeftNavSectionItem.classList.add(this.options.classNavSection);\n        newLeftNavSectionItem.classList.add(\"\".concat(this.options.classNavSection, \"--\").concat(selectedLeftNavSectionValue));\n        var newLeftNavSectionItemAnchor = document.createElement('a');\n        newLeftNavSectionItemAnchor.setAttribute('href', 'javascript:void(0)'); // eslint-disable-line no-script-url\n\n        newLeftNavSectionItemAnchor.setAttribute('tabindex', 0);\n        newLeftNavSectionItemAnchor.classList.add(this.options.classNavSectionAnchor);\n        var newLeftNavSectionItemIcon = selectedLeftNavSectionItemIcon.cloneNode(true); // IE11 doesn't support classList on SVG, must revert to className\n\n        newLeftNavSectionItemIcon.setAttribute('class', this.options.classTaxonomyIcon);\n        newLeftNavSectionItemIcon.removeAttribute('data-left-nav-current-section-icon');\n        newLeftNavSectionItemIcon.setAttribute('data-left-nav-section-icon', selectedLeftNavSectionValue);\n        var newLeftNavSectionItemLink = document.createElement('span');\n        newLeftNavSectionItemLink.setAttribute('data-left-nav-section-link', '');\n        newLeftNavSectionItemLink.classList.add(this.options.classNavSectionLink);\n        newLeftNavSectionItemLink.textContent = selectedLeftNavSectionItemTitle.textContent;\n        this.animateNavSection(leftNavSectionItem);\n        this.animateNavList(leftNavSectionValue);\n        newLeftNavSectionItemAnchor.appendChild(newLeftNavSectionItemIcon);\n        newLeftNavSectionItemAnchor.appendChild(newLeftNavSectionItemLink);\n        newLeftNavSectionItem.appendChild(newLeftNavSectionItemAnchor);\n        leftNavSections.insertBefore(newLeftNavSectionItem, leftNavSections.firstChild);\n        setTimeout(function () {\n          selectedLeftNavSectionItemTitle.textContent = leftNavSectionItemLink.textContent;\n          selectedLeftNavSectionItem.setAttribute('data-left-nav-current-section', leftNavSectionValue);\n          selectedLeftNavSectionItemIcon.setAttribute('data-left-nav-current-section-icon', leftNavSectionValue);\n          selectedLeftNavSectionItemUse.setAttribute('xlink:href', leftNavSectionItemIconUse.getAttribute('xlink:href'));\n          leftNavSectionItem.parentNode.removeChild(leftNavSectionItem); // Cant use .remove() because of IE11\n\n          _this10.leftNavSectionActive = false;\n        }, 450); // Wait for nav items to animate\n      }\n    }\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode LeftNav.create .create()}, or {@linkcode LeftNav.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode LeftNav.init .init()} works.\n     * @member LeftNav.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find left nav containers.\n     * @property {string} [selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n     * @property {string} [selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n     * @property {string} [selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n     * @property {string} [selectorLeftNavToggle]\n     *   The data attribute selector for the button that will show and hide the left navigation.\n     * @property {string} [selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n     * @property {string} [selectorLeftNavNestedListItem]\n     *   The data attribute selector for all nested list items in the left navigation.\n     * @property {string} [selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n     * @property {string} [selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n     * @property {string} [selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n     * @property {string} [selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n     * @property {string} [selectorLeftNavCurrentPage]\n     *   The data attribute selector for the current section title in the left nav header.\n     * @property {string} [selectorLeftNavMainNavHidden] The CSS selector for the hidden main nav.\n     * @property {string} [classActiveLeftNav] The class name for when a left nav is active.\n     * @property {string} [classActiveLeftNavListItem] The class name for when a left nav list item is active.\n     * @property {string} [classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n     * @property {string} [classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n     * @property {string} [classActiveSection] The class name for an active section item in the left nav header.\n     * @property {string} [classItemHasChildren] The class name for when a list item has children.\n     * @property {string} [classTaxonomyIcon] The class name for the taxonomy icon.\n     */\n\n  }], [{\n    key: \"options\",\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-left-nav-container]',\n        // Data Attribute selectors\n        selectorLeftNav: '[data-left-nav]',\n        selectorLeftNavList: '[data-left-nav-list]',\n        selectorLeftNavNestedList: '[data-left-nav-nested-list]',\n        selectorLeftNavToggleOpen: '[data-left-nav-toggle=\"open\"]',\n        selectorLeftNavToggleClose: '[data-left-nav-toggle=\"close\"]',\n        selectorLeftNavListItem: '[data-left-nav-item]',\n        selectorLeftNavListItemLink: '[data-left-nav-item-link]',\n        selectorLeftNavNestedListItem: '[data-left-nav-nested-item]',\n        selectorLeftNavArrowIcon: '[data-left-nav-icon]',\n        selectorLeftNavFlyoutMenu: '[data-left-nav-flyout]',\n        selectorLeftNavFlyoutItem: '[data-left-nav-flyout-item]',\n        selectorLeftNavSections: '[data-left-nav-sections]',\n        selectorLeftNavSection: '[data-left-nav-section]',\n        selectorLeftNavSectionLink: '[data-left-nav-section-link]',\n        selectorLeftNavSectionIcon: '[data-left-nav-section-icon]',\n        selectorLeftNavCurrentSection: '[data-left-nav-current-section]',\n        selectorLeftNavCurrentSectionTitle: '[data-left-nav-current-section-title]',\n        selectorLeftNavCurrentSectionIcon: '[data-left-nav-current-section-icon]',\n        selectorLeftNavListItemHasChildren: '[data-left-nav-item-with-children]',\n        selectorLeftNavListItemHasFlyout: '[data-left-nav-has-flyout]',\n        selectorLeftNavAllListItems: '[data-left-nav-item], [data-left-nav-nested-item], [data-left-nav-flyout-item]',\n        selectorLeftNavMainNavHidden: \".\".concat(prefix, \"--left-nav__main-nav--hidden\"),\n        // CSS Class Selectors\n        classActiveTrigger: \"\".concat(prefix, \"--left-nav__trigger--active\"),\n        classActiveLeftNav: \"\".concat(prefix, \"--left-nav--active\"),\n        classActiveLeftNavListItem: \"\".concat(prefix, \"--active-list-item\"),\n        classExpandedLeftNavListItem: \"\".concat(prefix, \"--main-nav__parent-item--expanded\"),\n        classFlyoutDisplayed: \"\".concat(prefix, \"--nested-list__flyout-menu--displayed\"),\n        classItemHasChildren: \"\".concat(prefix, \"--main-nav__parent-item--has-children\"),\n        classNavSection: \"\".concat(prefix, \"--left-nav__section\"),\n        classNavSectionTransition: \"\".concat(prefix, \"--left-nav__section--transition\"),\n        classNavSectionAnchor: \"\".concat(prefix, \"--left-nav__section--anchor\"),\n        classNavSectionLink: \"\".concat(prefix, \"--left-nav__section--link\"),\n        classNavHeaderTitle: \"\".concat(prefix, \"--left-nav__header--title\"),\n        classItemFade: \"\".concat(prefix, \"--main-nav__parent-item--fade\"),\n        classItemHidden: \"\".concat(prefix, \"--main-nav__parent-item--hidden\"),\n        classListHidden: \"\".concat(prefix, \"--left-nav__main-nav--hidden\"),\n        classListTop: \"\".concat(prefix, \"--left-nav__main-nav--top\"),\n        classTaxonomyIcon: \"\".concat(prefix, \"--left-nav__section--taxonomy-icon\")\n      };\n    }\n    /**\n     * The map associating DOM element and left navigation instance.\n     * @member LeftNav.components\n     * @type {WeakMap}\n     */\n\n  }]);\n\n  LeftNav.components = new WeakMap();\n  return LeftNav;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nexport default !breakingChangesX ? LeftNav : removedComponent('LeftNav');","map":null,"metadata":{},"sourceType":"module"}