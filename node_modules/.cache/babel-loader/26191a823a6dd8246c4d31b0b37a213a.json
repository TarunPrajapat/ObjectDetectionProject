{"ast":null,"code":"/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport var keys = {\n  TAB: 9,\n  ENTER: 13,\n  ESC: 27,\n  SPACE: 32,\n  PAGEUP: 33,\n  PAGEDOWN: 34,\n  END: 35,\n  HOME: 36,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n};\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import { keys, matches } from '../keys';\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.ENTER, keys.SPACE]) {\n *     // ...\n *   }\n * }\n * @param {Event} event\n * @param {Array<number>} keysToMatch\n * @returns {boolean}\n */\n\nexport function matches(event, keysToMatch) {\n  for (var i = 0; i < keysToMatch.length; i++) {\n    if (keysToMatch[i] === event.which) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import { keys, match } from '../keys';\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.ENTER) {\n *     // ...\n *   }\n * }\n * @param {Event|number} eventOrCode\n * @param {number} key - the `which` value, should come from keys\n * @returns {boolean}\n */\n\nexport function match(eventOrCode, key) {\n  return eventOrCode.which === key || eventOrCode === key;\n}\n/**\n * Get a string character for a given event or event code (useful for synthetic\n * events)\n *\n * @param {Event|number} eventOrCode\n * @returns {string}\n */\n\nexport function getCharacterFor(eventOrCode) {\n  if (typeof eventOrCode === 'number') {\n    return String.fromCharCode(eventOrCode);\n  }\n\n  return eventOrCode.key || String.fromCharCode(eventOrCode.which || eventOrCode.keyCode);\n}","map":null,"metadata":{},"sourceType":"module"}