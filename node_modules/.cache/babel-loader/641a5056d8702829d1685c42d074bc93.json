{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport eventedState from '../../globals/js/mixins/evented-state';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\n\nvar Notification =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Notification, _mixin);\n  /**\n   * InlineNotification.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a InlineNotification.\n   */\n\n\n  function Notification(element, options) {\n    var _this;\n\n    _classCallCheck(this, Notification);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Notification).call(this, element, options));\n\n    _this._changeState = function (state, callback) {\n      if (state === 'delete-notification') {\n        _this.element.parentNode.removeChild(_this.element);\n\n        _this.release();\n      }\n\n      callback();\n    };\n\n    _this.button = element.querySelector(_this.options.selectorButton);\n\n    if (_this.button) {\n      _this.manage(on(_this.button, 'click', function (evt) {\n        if (evt.currentTarget === _this.button) {\n          _this.remove();\n        }\n      }));\n    }\n\n    return _this;\n  }\n\n  _createClass(Notification, [{\n    key: \"remove\",\n    value: function remove() {\n      this.changeState('delete-notification');\n    }\n    /**\n     * The map associating DOM element and accordion UI instance.\n     * @type {WeakMap}\n     */\n\n  }]);\n\n  Notification.components = new WeakMap();\n  Notification.options = {\n    selectorInit: '[data-notification]',\n    selectorButton: '[data-notification-btn]',\n    eventBeforeDeleteNotification: 'notification-before-delete',\n    eventAfterDeleteNotification: 'notification-after-delete'\n  };\n  return Notification;\n}(mixin(createComponent, initComponentBySearch, eventedState, handles));\n\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}