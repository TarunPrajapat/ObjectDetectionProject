{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\nvar stateChangeTypes = {\n  true: 'true',\n  false: 'false',\n  mixed: 'mixed'\n};\n\nvar Checkbox =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Checkbox, _mixin);\n  /**\n   * Checkbox UI.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a checkbox UI.\n   */\n\n\n  function Checkbox(element, options) {\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Checkbox).call(this, element, options));\n\n    _this.manage(on(_this.element, 'click', function (event) {\n      _this._handleClick(event);\n    }));\n\n    _this.manage(on(_this.element, 'focus', function (event) {\n      _this._handleFocus(event);\n    }));\n\n    _this.manage(on(_this.element, 'blur', function (event) {\n      _this._handleBlur(event);\n    }));\n\n    _this._indeterminateCheckbox();\n\n    _this._initCheckbox();\n\n    return _this;\n  }\n\n  _createClass(Checkbox, [{\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      if (this.element.checked === true) {\n        this.element.setAttribute('checked', '');\n        this.element.setAttribute('aria-checked', 'true');\n        this.element.checked = true; // nested checkboxes inside labels\n\n        if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n          this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'true');\n        }\n      } else if (this.element.checked === false) {\n        this.element.removeAttribute('checked');\n        this.element.setAttribute('aria-checked', 'false');\n        this.element.checked = false; // nested checkboxes inside labels\n\n        if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n          this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'false');\n        }\n      }\n    }\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.classList.add(this.options.classLabelFocused);\n      }\n    }\n  }, {\n    key: \"_handleBlur\",\n    value: function _handleBlur() {\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.classList.remove(this.options.classLabelFocused);\n      }\n    }\n    /**\n     * Sets the new checkbox state.\n     * @param {boolean|string} [state]\n     *   The new checkbox state to set. `mixed` to put checkbox in indeterminate state.\n     *   If omitted, this method simply makes the style reflect `aria-checked` attribute.\n     */\n\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      if (state === undefined || stateChangeTypes[state] === undefined) {\n        throw new TypeError('setState expects a value of true, false or mixed.');\n      }\n\n      this.element.setAttribute('aria-checked', state);\n      this.element.indeterminate = state === stateChangeTypes.mixed;\n      this.element.checked = state === stateChangeTypes.true;\n      var container = this.element.closest(this.options.selectorContainedCheckboxState);\n\n      if (container) {\n        container.setAttribute(this.options.attribContainedCheckboxState, state);\n      }\n    }\n  }, {\n    key: \"setDisabled\",\n    value: function setDisabled(value) {\n      if (value === undefined) {\n        throw new TypeError('setDisabled expects a boolean value of true or false');\n      }\n\n      if (value === true) {\n        this.element.setAttribute('disabled', true);\n      } else if (value === false) {\n        this.element.removeAttribute('disabled');\n      }\n\n      var container = this.element.closest(this.options.selectorContainedCheckboxDisabled);\n\n      if (container) {\n        container.setAttribute(this.options.attribContainedCheckboxDisabled, value);\n      }\n    }\n  }, {\n    key: \"_indeterminateCheckbox\",\n    value: function _indeterminateCheckbox() {\n      if (this.element.getAttribute('aria-checked') === 'mixed') {\n        this.element.indeterminate = true;\n      }\n\n      if (this.element.indeterminate === true) {\n        this.element.setAttribute('aria-checked', 'mixed');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.indeterminate === true) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'mixed');\n      }\n    }\n  }, {\n    key: \"_initCheckbox\",\n    value: function _initCheckbox() {\n      if (this.element.checked === true) {\n        this.element.setAttribute('aria-checked', 'true');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.checked) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'true');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxDisabled, 'false');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.disabled) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxDisabled, 'true');\n      }\n    }\n    /**\n     * The map associating DOM element and copy button UI instance.\n     * @member Checkbox.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode Checkbox.create .create()}, or {@linkcode Checkbox.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode Checkbox.init .init()} works.\n     * @member Checkbox.options\n     * @type {Object}\n     * @property {string} selectorInit The data attribute to find copy button UIs.\n     * @property {string} selectorContainedCheckboxState The CSS selector to find a container of checkbox preserving checked state.\n     * @property {string} selectorContainedCheckboxDisabled\n     *   The CSS selector to find a container of checkbox preserving disabled state.\n     * @property {string} classLabel The CSS class for the label.\n     * @property {string} classLabelFocused The CSS class for the focused label.\n     * @property {string} attribContainedCheckboxState The attribute name for the checked state of contained checkbox.\n     * @property {string} attribContainedCheckboxDisabled The attribute name for the disabled state of contained checkbox.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: \".\".concat(prefix, \"--checkbox\"),\n        selectorContainedCheckboxState: '[data-contained-checkbox-state]',\n        selectorContainedCheckboxDisabled: '[data-contained-checkbox-disabled]',\n        classLabel: \"\".concat(prefix, \"--checkbox-label\"),\n        classLabelFocused: \"\".concat(prefix, \"--checkbox-label__focus\"),\n        attribContainedCheckboxState: 'data-contained-checkbox-state',\n        attribContainedCheckboxDisabled: 'data-contained-checkbox-disabled'\n      };\n    }\n  }]);\n\n  Checkbox.components = new WeakMap();\n  Checkbox.stateChangeTypes = stateChangeTypes;\n  return Checkbox;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}