{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nexport default function (ToMix) {\n  var CreateComponent =\n  /*#__PURE__*/\n  function (_ToMix) {\n    _inherits(CreateComponent, _ToMix);\n    /**\n     * The component instances managed by this component.\n     * Releasing this component also releases the components in `this.children`.\n     * @type {Component[]}\n     */\n\n    /**\n     * Mix-in class to manage lifecycle of component.\n     * The constructor sets up this component's effective options,\n     * and registers this component't instance associated to an element.\n     * @implements Handle\n     * @param {HTMLElement} element The element working as this component.\n     * @param {Object} [options] The component options.\n     */\n\n\n    function CreateComponent(element) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, CreateComponent);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateComponent).call(this, element, options));\n      _this.children = [];\n\n      if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n        throw new TypeError('DOM element should be given to initialize this widget.');\n      }\n      /**\n       * The element the component is of.\n       * @type {Element}\n       */\n\n\n      _this.element = element;\n      /**\n       * The component options.\n       * @type {Object}\n       */\n\n      _this.options = Object.assign(Object.create(_this.constructor.options), options);\n\n      _this.constructor.components.set(_this.element, _assertThisInitialized(_assertThisInitialized(_this)));\n\n      return _this;\n    }\n    /**\n     * Instantiates this component of the given element.\n     * @param {HTMLElement} element The element.\n     */\n\n\n    _createClass(CreateComponent, [{\n      key: \"release\",\n\n      /**\n       * Releases this component's instance from the associated element.\n       */\n      value: function release() {\n        for (var child = this.children.pop(); child; child = this.children.pop()) {\n          child.release();\n        }\n\n        this.constructor.components.delete(this.element);\n        return null;\n      }\n    }], [{\n      key: \"create\",\n      value: function create(element, options) {\n        return this.components.get(element) || new this(element, options);\n      }\n    }]);\n\n    return CreateComponent;\n  }(ToMix);\n\n  return CreateComponent;\n}","map":null,"metadata":{},"sourceType":"module"}