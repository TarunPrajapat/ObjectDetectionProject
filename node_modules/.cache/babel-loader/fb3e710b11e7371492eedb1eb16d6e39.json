{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { iconClose, iconCheckmarkSolid, iconErrorSolid, iconInfoSolid, iconWarningSolid } from 'carbon-icons';\nimport { settings } from 'carbon-components';\nimport Icon from '../Icon'; // temporary workaround for a11y warning icon. TODO: for @carbon/icons-react\n\nimport a11yIconWarningSolid from './a11yIconWarningSolid';\nvar prefix = settings.prefix;\nexport var NotificationButton =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NotificationButton, _Component);\n\n  function NotificationButton() {\n    _classCallCheck(this, NotificationButton);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NotificationButton).apply(this, arguments));\n  }\n\n  _createClass(NotificationButton, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames, _classNames2;\n\n      var _this$props = this.props,\n          ariaLabel = _this$props.ariaLabel,\n          className = _this$props.className,\n          iconDescription = _this$props.iconDescription,\n          type = _this$props.type,\n          icon = _this$props.icon,\n          name = _this$props.name,\n          notificationType = _this$props.notificationType,\n          other = _objectWithoutProperties(_this$props, [\"ariaLabel\", \"className\", \"iconDescription\", \"type\", \"icon\", \"name\", \"notificationType\"]);\n\n      var buttonClasses = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefix, \"--toast-notification__close-button\"), notificationType === 'toast'), _defineProperty(_classNames, \"\".concat(prefix, \"--inline-notification__close-button\"), notificationType === 'inline'), _classNames), className);\n      var iconClasses = classNames((_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--toast-notification__close-icon\"), notificationType === 'toast'), _defineProperty(_classNames2, \"\".concat(prefix, \"--inline-notification__close-icon\"), notificationType === 'inline'), _classNames2));\n      return React.createElement(\"button\", _extends({}, other, {\n        type: type,\n        className: buttonClasses\n      }), React.createElement(Icon, {\n        description: iconDescription,\n        className: iconClasses,\n        \"aria-label\": ariaLabel,\n        icon: !icon && !name ? iconClose : icon,\n        name: name\n      }));\n    }\n  }]);\n\n  return NotificationButton;\n}(Component);\n\n_defineProperty(NotificationButton, \"propTypes\", {\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify a label to be read by screen readers on the notification button\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: PropTypes.string,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string,\n\n  /**\n   * Specify an optional icon for the Button through an object representing the SVG data of the icon,\n   * if something but regular \"close\" icon is desirable\n   */\n  icon: PropTypes.shape({\n    width: PropTypes.string,\n    height: PropTypes.string,\n    viewBox: PropTypes.string.isRequired,\n    svgData: PropTypes.object.isRequired\n  }),\n\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: PropTypes.string,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline'])\n});\n\n_defineProperty(NotificationButton, \"defaultProps\", {\n  ariaLabel: 'close notificaion',\n  notificationType: 'toast',\n  type: 'button',\n  iconDescription: 'close icon'\n});\n\nexport var NotificationTextDetails =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(NotificationTextDetails, _Component2);\n\n  function NotificationTextDetails() {\n    _classCallCheck(this, NotificationTextDetails);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(NotificationTextDetails).apply(this, arguments));\n  }\n\n  _createClass(NotificationTextDetails, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          title = _this$props2.title,\n          subtitle = _this$props2.subtitle,\n          caption = _this$props2.caption,\n          notificationType = _this$props2.notificationType,\n          other = _objectWithoutProperties(_this$props2, [\"title\", \"subtitle\", \"caption\", \"notificationType\"]);\n\n      if (notificationType === 'toast') {\n        return React.createElement(\"div\", _extends({}, other, {\n          className: \"\".concat(prefix, \"--toast-notification__details\")\n        }), React.createElement(\"h3\", {\n          className: \"\".concat(prefix, \"--toast-notification__title\")\n        }, title), React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--toast-notification__subtitle\")\n        }, subtitle), React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--toast-notification__caption\")\n        }, caption));\n      }\n\n      if (notificationType === 'inline') {\n        return React.createElement(\"div\", _extends({}, other, {\n          className: \"\".concat(prefix, \"--inline-notification__text-wrapper\")\n        }), React.createElement(\"p\", {\n          className: \"\".concat(prefix, \"--inline-notification__title\")\n        }, title), React.createElement(\"div\", {\n          className: \"\".concat(prefix, \"--inline-notification__subtitle\")\n        }, subtitle));\n      }\n    }\n  }]);\n\n  return NotificationTextDetails;\n}(Component);\n\n_defineProperty(NotificationTextDetails, \"propTypes\", {\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Specify the notification type\n   */\n  notificationType: PropTypes.oneOf(['toast', 'inline'])\n});\n\n_defineProperty(NotificationTextDetails, \"defaultProps\", {\n  title: 'title',\n  subtitle: 'subtitle',\n  caption: 'caption',\n  notificationType: 'toast'\n});\n\nexport var ToastNotification =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(ToastNotification, _Component3);\n\n  function ToastNotification() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ToastNotification);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToastNotification)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      open: true\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleCloseButtonClick\", function (evt) {\n      _this.setState({\n        open: false\n      });\n\n      _this.props.onCloseButtonClick(evt);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"useIcon\", function (kindProp) {\n      return {\n        error: iconErrorSolid,\n        success: iconCheckmarkSolid,\n        warning: iconWarningSolid,\n        info: iconInfoSolid\n      }[kindProp];\n    });\n\n    return _this;\n  }\n\n  _createClass(ToastNotification, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.timeout) {\n        setTimeout(function () {\n          _this2.handleCloseButtonClick();\n        }, this.props.timeout);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.open) {\n        return null;\n      }\n\n      var _this$props3 = this.props,\n          role = _this$props3.role,\n          notificationType = _this$props3.notificationType,\n          onCloseButtonClick = _this$props3.onCloseButtonClick,\n          iconDescription = _this$props3.iconDescription,\n          className = _this$props3.className,\n          caption = _this$props3.caption,\n          subtitle = _this$props3.subtitle,\n          title = _this$props3.title,\n          kind = _this$props3.kind,\n          hideCloseButton = _this$props3.hideCloseButton,\n          other = _objectWithoutProperties(_this$props3, [\"role\", \"notificationType\", \"onCloseButtonClick\", \"iconDescription\", \"className\", \"caption\", \"subtitle\", \"title\", \"kind\", \"hideCloseButton\"]);\n\n      var classes = classNames(\"\".concat(prefix, \"--toast-notification\"), _defineProperty({}, \"\".concat(prefix, \"--toast-notification--\").concat(this.props.kind), this.props.kind), className);\n      return React.createElement(\"div\", _extends({}, other, {\n        role: role,\n        kind: kind,\n        className: classes\n      }), React.createElement(NotificationTextDetails, {\n        title: title,\n        subtitle: subtitle,\n        caption: caption,\n        notificationType: notificationType\n      }), !hideCloseButton && React.createElement(NotificationButton, {\n        iconDescription: iconDescription,\n        notificationType: notificationType,\n        onClick: this.handleCloseButtonClick\n      }));\n    }\n  }]);\n\n  return ToastNotification;\n}(Component);\n\n_defineProperty(ToastNotification, \"propTypes\", {\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node.isRequired,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.node,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string.isRequired,\n\n  /**\n   * By default, this value is \"toast\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool,\n\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: PropTypes.number\n});\n\n_defineProperty(ToastNotification, \"defaultProps\", {\n  kind: 'error',\n  title: 'provide a title',\n  subtitle: 'provide a subtitle',\n  caption: 'provide a caption',\n  role: 'alert',\n  notificationType: 'toast',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false,\n  timeout: 0\n});\n\nexport var InlineNotification =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(InlineNotification, _Component4);\n\n  function InlineNotification() {\n    var _getPrototypeOf3;\n\n    var _this3;\n\n    _classCallCheck(this, InlineNotification);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this3 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(InlineNotification)).call.apply(_getPrototypeOf3, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), \"state\", {\n      open: true\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), \"handleCloseButtonClick\", function (evt) {\n      _this3.setState({\n        open: false\n      });\n\n      _this3.props.onCloseButtonClick(evt);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), \"useIcon\", function (kindProp) {\n      return {\n        error: iconErrorSolid,\n        success: iconCheckmarkSolid,\n        warning: iconWarningSolid,\n        info: iconInfoSolid\n      }[kindProp];\n    });\n\n    return _this3;\n  }\n\n  _createClass(InlineNotification, [{\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      if (!this.state.open) {\n        return null;\n      }\n\n      var _this$props4 = this.props,\n          role = _this$props4.role,\n          notificationType = _this$props4.notificationType,\n          onCloseButtonClick = _this$props4.onCloseButtonClick,\n          iconDescription = _this$props4.iconDescription,\n          className = _this$props4.className,\n          subtitle = _this$props4.subtitle,\n          title = _this$props4.title,\n          kind = _this$props4.kind,\n          hideCloseButton = _this$props4.hideCloseButton,\n          other = _objectWithoutProperties(_this$props4, [\"role\", \"notificationType\", \"onCloseButtonClick\", \"iconDescription\", \"className\", \"subtitle\", \"title\", \"kind\", \"hideCloseButton\"]);\n\n      var classes = classNames(\"\".concat(prefix, \"--inline-notification\"), _defineProperty({}, \"\".concat(prefix, \"--inline-notification--\").concat(this.props.kind), this.props.kind), className);\n\n      var NotificationIcon = function NotificationIcon(kind) {\n        switch (kind) {\n          case 'warning':\n            return a11yIconWarningSolid(prefix, notificationType);\n\n          default:\n            return React.createElement(Icon, {\n              description: _this4.props.iconDescription,\n              className: \"\".concat(prefix, \"--inline-notification__icon\"),\n              \"aria-label\": \"close\",\n              icon: _this4.useIcon(kind)\n            });\n        }\n      };\n\n      return React.createElement(\"div\", _extends({}, other, {\n        role: role,\n        kind: kind,\n        className: classes\n      }), React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--inline-notification__details\")\n      }, NotificationIcon(kind), React.createElement(NotificationTextDetails, {\n        title: title,\n        subtitle: subtitle,\n        notificationType: notificationType\n      })), !hideCloseButton && React.createElement(NotificationButton, {\n        iconDescription: iconDescription,\n        notificationType: notificationType,\n        onClick: this.handleCloseButtonClick\n      }));\n    }\n  }]);\n\n  return InlineNotification;\n}(Component); // Deprecated\n\n_defineProperty(InlineNotification, \"propTypes\", {\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.node.isRequired,\n\n  /**\n   * By default, this value is \"alert\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string.isRequired,\n\n  /**\n   * By default, this value is \"inline\". You can also provide an alternate type\n   * if it makes sense for the underlying `<NotificationTextDetails>` and `<NotificationButton>`\n   */\n  notificationType: PropTypes.string,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool\n});\n\n_defineProperty(InlineNotification, \"defaultProps\", {\n  role: 'alert',\n  notificationType: 'inline',\n  iconDescription: 'closes notification',\n  onCloseButtonClick: function onCloseButtonClick() {},\n  hideCloseButton: false\n});\n\nvar Notification =\n/*#__PURE__*/\nfunction (_Component5) {\n  _inherits(Notification, _Component5);\n\n  function Notification() {\n    var _getPrototypeOf4;\n\n    var _this5;\n\n    _classCallCheck(this, Notification);\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    _this5 = _possibleConstructorReturn(this, (_getPrototypeOf4 = _getPrototypeOf(Notification)).call.apply(_getPrototypeOf4, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this5)), \"state\", {\n      open: true\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this5)), \"handleCloseButtonClick\", function (evt) {\n      _this5.setState({\n        open: false\n      });\n\n      _this5.props.onCloseButtonClick(evt);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this5)), \"useIcon\", function (kindProp) {\n      return {\n        error: iconErrorSolid,\n        info: iconInfoSolid,\n        success: iconCheckmarkSolid,\n        warning: iconWarningSolid\n      }[kindProp];\n    });\n\n    return _this5;\n  }\n\n  _createClass(Notification, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.open) {\n        return null;\n      }\n\n      var _this$props5 = this.props,\n          onCloseButtonClick = _this$props5.onCloseButtonClick,\n          iconDescription = _this$props5.iconDescription,\n          className = _this$props5.className,\n          caption = _this$props5.caption,\n          subtitle = _this$props5.subtitle,\n          title = _this$props5.title,\n          kind = _this$props5.kind,\n          hideCloseButton = _this$props5.hideCloseButton,\n          other = _objectWithoutProperties(_this$props5, [\"onCloseButtonClick\", \"iconDescription\", \"className\", \"caption\", \"subtitle\", \"title\", \"kind\", \"hideCloseButton\"]);\n\n      var notificationClasses = {\n        toast: classNames(\"\".concat(prefix, \"--toast-notification\"), _defineProperty({}, \"\".concat(prefix, \"--toast-notification--\").concat(this.props.kind), this.props.kind), className),\n        inline: classNames(\"\".concat(prefix, \"--inline-notification\"), _defineProperty({}, \"\".concat(prefix, \"--inline-notification--\").concat(this.props.kind), this.props.kind), className)\n      };\n      var toastHTML = React.createElement(\"div\", _extends({}, other, {\n        role: \"alert\",\n        kind: kind,\n        className: notificationClasses.toast\n      }), React.createElement(NotificationTextDetails, {\n        title: title,\n        subtitle: subtitle,\n        caption: caption,\n        notificationType: \"toast\"\n      }), !hideCloseButton && React.createElement(NotificationButton, {\n        notificationType: \"toast\",\n        onClick: this.handleCloseButtonClick\n      }));\n      var inlineHTML = React.createElement(\"div\", _extends({}, other, {\n        role: \"alert\",\n        kind: kind,\n        className: notificationClasses.inline\n      }), React.createElement(\"div\", {\n        className: \"\".concat(prefix, \"--inline-notification__details\")\n      }, React.createElement(Icon, {\n        description: this.props.iconDescription,\n        className: \"\".concat(prefix, \"--inline-notification__icon\"),\n        \"aria-label\": \"close\",\n        icon: this.useIcon(kind)\n      }), React.createElement(NotificationTextDetails, {\n        title: title,\n        subtitle: subtitle,\n        notificationType: \"inline\"\n      })), !hideCloseButton && React.createElement(NotificationButton, {\n        notificationType: \"inline\",\n        onClick: this.handleCloseButtonClick\n      }));\n      return caption ? toastHTML : inlineHTML;\n    }\n  }]);\n\n  return Notification;\n}(Component);\n\n_defineProperty(Notification, \"propTypes\", {\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify what state the notification represents\n   */\n  kind: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n\n  /**\n   * Specify the title\n   */\n  title: PropTypes.string.isRequired,\n\n  /**\n   * Specify the sub-title\n   */\n  subtitle: PropTypes.string.isRequired,\n\n  /**\n   * Specify the caption\n   */\n  caption: PropTypes.string,\n\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onCloseButtonClick: PropTypes.func,\n\n  /**\n   * Provide a description for \"close\" icon that can be read by screen readers\n   */\n  iconDescription: PropTypes.string.isRequired,\n\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: PropTypes.bool\n});\n\n_defineProperty(Notification, \"defaultProps\", {\n  onCloseButtonClick: function onCloseButtonClick() {},\n  iconDescription: 'closes notification',\n  title: 'Provide a title',\n  subtitle: 'Provide a subtitle',\n  hideCloseButton: false\n});\n\nexport { Notification as default };","map":null,"metadata":{},"sourceType":"module"}