//
// Copyright IBM Corp. 2016, 2018
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

/**
 * Copyright IBM Corp. 2018, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Column helpers for @carbon/grid. Heavily inspired by, or derived from,
 * bootstrap:
 * https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_grid.scss
 */
@import '@carbon/layout/scss/breakpoint';
@import 'prefix';

@mixin make-col-ready($gutter: $grid-gutter) {
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);

  // Support the padding use-case for each columns. Idea is that each child in a
  // cell selector should have the default padding applied.
  .#{$prefix}--grid--padding & > * {
    padding: $grid-cell-padding;
  }

  // When in a bleed grid, we collapse all gutters so each column is flat with
  // the each other.
  .#{$prefix}--grid--bleed & {
    padding-right: 0;
    padding-left: 0;
  }

  // For our condensed use-case, our gutters collapse to 2px solid, 1px on each
  // side.
  .#{$prefix}--grid--condensed & {
    padding-right: 1px;
    padding-left: 1px;
  }

  .#{$prefix}--grid--padding.#{$prefix}--grid--hang & {
    padding-left: 0;
  }

  [dir='rtl'] .#{$prefix}--grid--padding.#{$prefix}--grid--hang & {
    padding-right: 0;
    padding-left: unset;
  }
}

@mixin make-col($span, $columns) {
  flex: 0 0 percentage($span / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($span / $columns);
}

@mixin make-col-offset($span, $columns) {
  $offset: $span / $columns;
  @if $offset == 0 {
    margin-left: 0;
  } @else {
    margin-left: percentage($offset);
  }
}

@mixin make-grid-columns($breakpoints: $grid-breakpoints, $gutter: $grid-gutter) {
  .#{$prefix}--col {
    @include make-col-ready();
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint);
    $columns: map-get(map-get($breakpoints, $breakpoint), columns);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .#{$prefix}--col#{$infix}-#{$i} {
        @include make-col-ready();
      }
    }

    .#{$prefix}--col#{$infix},
    .#{$prefix}--col#{$infix}--auto {
      @include make-col-ready();
    }

    @include breakpoint($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .#{$prefix}--col,
      .#{$prefix}--col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .#{$prefix}--col--auto,
      .#{$prefix}--col#{$infix}--auto {
        flex: 1 0 0%;
        width: auto;
        // Reset earlier grid tiers
        max-width: 100%;
      }

      @for $i from 1 through $columns {
        .#{$prefix}--col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @for $i from 1 through ($columns - 1) {
        @if not($infix == '' and $i == 0) {
          .#{$prefix}--offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}
