//
// Copyright IBM Corp. 2016, 2018
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

/**
 * Copyright IBM Corp. 2018, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

// https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_breakpoints.scss
@import 'convert';
@import 'utilities';

$grid-cell-padding: rem(16px);
$grid-gutter: rem(32px);

// Initial map of our breakpoints and their values
$grid-breakpoints: (
  sm: (
    columns: 4,
    margin: 0,
    width: rem(320px),
  ),
  md: (
    columns: 8,
    margin: rem(16px),
    width: rem(672px),
  ),
  lg: (
    columns: 16,
    margin: rem(16px),
    width: rem(1056px),
  ),
  xlg: (
    columns: 16,
    margin: rem(16px),
    width: rem(1312px),
  ),
  max: (
    columns: 16,
    margin: rem(16px),
    width: rem(1584px),
  ),
) !default;

/// Get the value of the next breakpoint, or null for the last breakpoint.
/// @param {String} $name - the name of the brekapoint
/// @param {Map} $breakpoints - a map of breakpoints where the key is the name
/// of the breakpoint and the value is the values for the breakpoint
/// @param {List} $breakpoint-names - a list of names from the $breakpoints map
/// @returns {String}
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if $n != null and $n < length($breakpoint-names) {
    @return nth($breakpoint-names, $n + 1);
  }
  @return null;
}

@function breakpoint-prev($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if $n != null and $n > 1 {
    @return nth($breakpoint-names, $n - 1);
  }
  @return null;
}

/// Check to see if the given breakpoint name
@function is-smallest-breakpoint($name, $breakpoints: $grid-breakpoints) {
  @return index(map-keys($breakpoints), $name) == 1;
}

/// returns the largest breakpoint name
/// @param {string} $breakpoint
/// @content
@function largest-breakpoint-name($breakpoints: $grid-breakpoints) {
  $total-breakpoints: length($breakpoints);
  @return key-by-index($breakpoints, $total-breakpoints);
}

/// Get the infix for a given breakpoint in a list of breakpoints. Usesful for
/// generate the size part in a selector, for example: `.prefix--col-sm-2`
/// @param {String} $name - the name of the breakpoint
/// @returns {String}
@function breakpoint-infix($name) {
  @return '-#{$name}';
}

/// Generate a media query up to the width of the given breakpoint name
/// @param {string} $name
/// @content
@mixin breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $breakpoint: map-get($breakpoints, $name);
  $width: map-get($breakpoint, width);

  @if map-has-key($breakpoints, $name) {
    @if is-smallest-breakpoint($name, $breakpoints) {
      @content;
    } @else {
      @media (min-width: $width) {
        @content;
      }
    }
  } @else {
    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map-keys($breakpoints)})';
  }
}

/// Generate a media query for the maximum width of the given styles
/// @param {string} $name
/// @content
@mixin breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $breakpoint: map-get($breakpoints, $name);
  $width: map-get($breakpoint, width);
  @if map-has-key($breakpoints, $name) {
    @if is-smallest-breakpoint($name, $breakpoints) {
      @content;
    } @else {
      @media (max-width: $width) {
        @content;
      }
    }
  } @else {
    @error 'Unable to find a breakpoint with name `#{$name}`. Expected one of: (#{map-keys($breakpoints)})';
  }
}

/// Generate a media query for the range between the lower and upper
/// breakpoints.
/// @param {string} $lower
/// @param {string} $upper
/// @content
@mixin breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $lower);
  $max: map-get($breakpoints, $upper);

  @if $min and $max {
    @media (min-width: map-get($min, width)) and (max-width: map-get($map, width)) {
      @content;
    }
  } @else if $min != null and $max == null {
    @include breakpoint-up($lower) {
      @content;
    }
  } @else if $min == null and $max != null {
    @include breakpoint-down($upper) {
      @content;
    }
  } @else {
    @error 'Unable to find a breakpoint to satisfy: (#{$lower},#{$upper}). Expected both to be one of (#{map-keys($breakpoints)}).';
  }
}

/// generate media query for the largest breakpoint
/// @param {string} $breakpoint
/// @content
@mixin largest-breakpoint($breakpoints: $grid-breakpoints) {
  @include breakpoint(largest-breakpoint-name()) {
    @content;
  }
}

/// Generate a media query for a given breakpoint
/// @param {string} $breakpoint
/// @content
@mixin breakpoint($name, $breakpoints: $grid-breakpoints) {
  @include breakpoint-up($name, $breakpoints) {
    @content;
  }
}
